Personal Tracker Project Documentation
Introduction
This documentation provides a guide to setting up, running, and testing the Personal Tracker project. The project consists of a backend server built with the MERN stack (MongoDB, Express, React, Node.js), with features designed to track and manage expenses, including duplicate expense detection.
1. Install Dependencies
To set up the project, follow these steps to install the necessary dependencies for both the backend and frontend:
Backend Dependencies:
1. Navigate to the backend project directory.
2. Run the following command to install backend dependencies:
   npm install
Frontend Dependencies:
1. Navigate to the frontend project directory.
2. Run the following command to install frontend dependencies:
   npm install
2. Run the Backend Server
To start the backend server, follow these steps:
1. Navigate to the backend project directory.
2. Run the following command to start the backend server:
   npm start
   The server will be running at http://localhost:4000.
3. Start the Frontend Application
To start the frontend application, follow these steps:
1. Navigate to the frontend project directory.
2. Run the following command to start the frontend application:
   npm start
   The frontend application will be running at http://localhost:3000.
4. Run Tests
To run the tests for both the backend and frontend applications, follow these steps:
Backend Tests:
1. Navigate to the backend project directory.
2. Run the following command to run backend tests:
   npm test
Frontend Tests:
1. Navigate to the frontend project directory.
2. Run the following command to run frontend tests:
   npm test
5. Assumptions Made During Development
1. The project assumes a basic understanding of the MERN stack.
2. MongoDB is assumed to be set up locally or remotely, with connection details configured in the backend.
3. The project assumes Node.js and npm are installed globally.
4. No specific authentication method was implemented, as the project focuses on the core functionality.
6. Duplicate Expense Detection Feature
The duplicate expense detection feature was designed to help users avoid entering duplicate expense records. This was implemented by using the following approach:
1. Each expense is uniquely identified by a combination of the expense name, amount, and date.
2. When a new expense is entered, the system checks the database to see if an existing record matches the new entry based on the unique identifiers.
3. If a match is found, the user is alerted about the duplicate entry and given the option to either update the existing record or discard the new entry.
4. A hashing technique is also used to further optimize and compare the expenses for potential duplicates efficiently.
